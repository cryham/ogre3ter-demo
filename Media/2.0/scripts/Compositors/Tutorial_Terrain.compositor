//  cube reflections
//------------------------------------------------------------------------------------
abstract target cubemap_target
{
	pass render_scene
	{
		load
		{
			all				clear
			clear_colour	0 0 0 1
		}
		store
		{
			//We only care about the contents of the colour target
			depth			dont_care
			stencil			dont_care
		}

		expose cubemap

		// rq_last		199
		visibility_mask		0x00000005

		overlays			off
		camera_cubemap_reorient true
	}

}

compositor_node CubemapRendererNode
{
	in 0 cubemap

	texture tmpCubemap target_width target_height target_format cubemap mipmaps 0

	target tmpCubemap +X : cubemap_target { }
	target tmpCubemap -X : cubemap_target { }
	target tmpCubemap +Y : cubemap_target { }
	target tmpCubemap -Y : cubemap_target { }
	target tmpCubemap +Z : cubemap_target { }
	target tmpCubemap -Z : cubemap_target
	{
		pass ibl_specular
		{
			input tmpCubemap
			output cubemap
		}
	}
}

// MSAA Cubemaps do not exist. Therefore we have to manually define the RTV (RenderTextureView)
// To render to a temporary MSAA surface and tell Ogre to resolve the MSAA contents into a cubemap
compositor_node CubemapRendererNodeMsaa
{
	in 0 cubemap

	// Note: IF you wish to preserve the MSAA contents of all 6 faces, then use
	//	'texture tmpMsaa target_width target_height 6 target_format 2d_array msaa 4 explicit_resolve'
	// instead
	texture tmpMsaa		target_width target_height target_format msaa 4 explicit_resolve
	texture tmpCubemap	target_width target_height target_format cubemap mipmaps 0

	rtv mixedCubemapRtv
	{
		// Specify we want to render to tmpMsaa at slot[0] but we want to resolve to tmpCubemap
		colour	0 tmpMsaa resolve tmpCubemap
	}

	target mixedCubemapRtv +X : cubemap_target { }
	target mixedCubemapRtv -X : cubemap_target { }
	target mixedCubemapRtv +Y : cubemap_target { }
	target mixedCubemapRtv -Y : cubemap_target { }
	target mixedCubemapRtv +Z : cubemap_target { }
	target mixedCubemapRtv -Z : cubemap_target
	{
		pass ibl_specular
		{
			input tmpCubemap
			output cubemap
		}
	}
}


//  planar reflections
//------------------------------------------------------------------------------------
compositor_node PlanarReflectionsReflectiveRenderingNode
{
	in 0 rt_renderwindow

	target rt_renderwindow
	{
		pass render_scene
		{
			load
			{
				all				clear
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				colour	store_or_resolve
				depth	dont_care
				stencil	dont_care
			}

			rq_last		199
			overlays		off
			visibility_mask 0xfffffffe
			// shadows		Tutorial_TerrainShadowNode

			profiling_id "Reflective pass"
		}

		pass generate_mipmaps
		{
			mipmap_method compute_hq

			profiling_id "Mipmap Generation (HQ)"
		}
	}
}

workspace PlanarReflectionsReflectiveWorkspace
{
	connect_output PlanarReflectionsReflectiveRenderingNode 0
}


//------------------------------------------------------------------------------------
//  render window  Final  NEW
//------------------------------------------------------------------------------------
compositor_node Tutorial_TerrainRenderingNode
{
	in 0 rt_renderwindow
	in 1 demo_dynamic_cubemap

	// rtt01 & rtt_final MUST share the same depth buffer.
	// Depth pools already take care of that. But just to be sure, we make it explicit
	texture depthBuffer	target_width target_height PFG_D32_FLOAT
	texture rtt01		target_width target_height target_format
	texture rtt_final	target_width target_height target_format

	rtv rtt01
	{
		depth_stencil	depthBuffer
	}
	rtv rtt_final
	{
		depth_stencil	depthBuffer
	}

	target rtt01
	{
		//  Pass with opaque objects  (and possibly regular transparents)
		pass render_scene
		{
			load
			{
				all				clear
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				colour	store_or_resolve
				depth	store
				stencil	dont_care
			}
			overlays	off
			shadows		Tutorial_TerrainShadowNode

			// ?
			// Our materials in this pass will be using this cubemap,
			// so we need to expose it to the pass.
			expose demo_dynamic_cubemap

			// Used by C++ to identify this pass wants planar reflections
			// in PlanarReflectionsWorkspaceListener
			// identifier	25001

			profiling_id "Main Render"

			rq_last		199
		}
	}

	target rtt_final
	{
		pass render_quad
		{
			load { all dont_care }
			material Ogre/Copy/4xFP32
			input 0 rtt01
		}

		//  Pass with refractive objects
		pass render_scene
		{
			load
			{
				all		load
			}
			store
			{
				colour	store_or_resolve
				depth	dont_care
				stencil	dont_care
			}

			// ?
			// expose demo_dynamic_cubemap
			identifier	25001

			rq_first		200

			overlays		on
			shadows			Tutorial_TerrainShadowNode reuse
			use_refractions	depthBuffer rtt01
		}
	}

	target rt_renderwindow
	{
		//  Output to window
		pass render_quad
		{
			load { all dont_care }
			material Ogre/Copy/4xFP32
			input 0 rtt_final
		}
	}
}


//  render window  Final  OLD
//------------------------------------------------------------------------------------
compositor_node Tutorial_TerrainRenderingNode_NoRefract
{
	in 0 rt_renderwindow
	in 1 demo_dynamic_cubemap

	target rt_renderwindow
	{
		pass clear
		{
			colour_value 0.2 0.4 0.6 1
		}

		pass render_scene
		{
			load
			{
				all				clear
				clear_colour	0.2 0.4 0.6 1
			}
			store
			{
				colour	store_or_resolve
				depth	dont_care
				stencil	dont_care
			}

			// Our materials in this pass will be using this cubemap,
			// so we need to expose it to the pass.
			expose demo_dynamic_cubemap

			// Used by C++ to identify this pass wants planar reflections
			// in PlanarReflectionsWorkspaceListener
			identifier	25001

			profiling_id "Main Render"

			overlays	on
			shadows		Tutorial_TerrainShadowNode
		}
	}
}


//  shadows
//------------------------------------------------------------------------------------
compositor_node_shadow Tutorial_TerrainShadowNode
{
	technique pssm

	texture atlas 3072 2048 PFG_D32_FLOAT

	num_splits		3
	pssm_lambda		0.95
	shadow_map 0 atlas uv 0.000000000000000 0.0 0.666666666666667 1.0 light 0 split 0
	shadow_map 1 atlas uv 0.666666666666667 0.0 0.333333333333333 0.5 light 0 split 1
	shadow_map 2 atlas uv 0.666666666666667 0.5 0.333333333333333 0.5 light 0 split 2

	target atlas
	{
		pass clear
		{
			colour_value 1 1 1 1
		}
	}

	shadow_map_target_type directional
	{
		shadow_map 0 1 2
		{
			pass render_scene
			{
				rq_last		199
			}
		}
	}
}


//  workspace  NEW  Refract
workspace Tutorial_TerrainWorkspace
{
	// Render Window on channel #0
	connect_external 0 Tutorial_TerrainRenderingNode 0
	// Cubemap on channel #1
	connect_external 1 Tutorial_TerrainRenderingNode 1
}


//  workspace  OLD
workspace Tutorial_TerrainWorkspace_NoRefract
{
	// Render Window on channel #0
	connect_external 0 Tutorial_TerrainRenderingNode_NoRefract 0
	// Cubemap on channel #1
	connect_external 1 Tutorial_TerrainRenderingNode_NoRefract 1
}
